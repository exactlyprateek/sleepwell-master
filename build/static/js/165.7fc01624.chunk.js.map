{"version":3,"sources":["views/product_service/ProductServiceReview.js"],"names":["ProductServiceReview","useState","reviews","setReviews","showAlertSuccess","setShowAlertSuccess","showAlertDanger","setShowAlertDanger","textMessage","setTextMessage","isActive","setIsActive","jwtToken","sessionStorage","getItem","deleteSize","reviewId","axios","delete","then","response","axiosReviews","catch","error","updateStatus","value","formData","FormData","status","console","log","append","post","headers","data","message","get","useEffect","xl","className","role","type","data-dismiss","aria-label","aria-hidden","scope","map","item","index","name","productName","description","onChange","e","id","onChangeIsActive","checked","dateFormat","createdAt","onClick","confirmAlert","title","buttons","label"],"mappings":"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","file":"static/js/165.7fc01624.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n    // CBadge,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    // CDataTable,\n    CRow,\n    // CPagination,\n    CLink\n} from '@coreui/react'\nimport axios from 'axios'\nimport dateFormat from 'dateformat'\nimport { confirmAlert } from 'react-confirm-alert'\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\nimport Switch from \"react-switch\";\n\nconst ProductServiceReview = () => {\n    const [reviews, setReviews] = useState([])\n    const [showAlertSuccess, setShowAlertSuccess] = useState(false);\n    const [showAlertDanger, setShowAlertDanger] = useState(false);\n    const [textMessage, setTextMessage] = useState('');\n    const [isActive, setIsActive] = useState(true);\n\n    const jwtToken = sessionStorage.getItem(\"token\");\n\n    const onChangeIsActive = (e, id) => {\n        console.log(e, id);\n        setIsActive(e);\n        updateStatus(id, e);\n    }\n\n    // \n    const clickOnDelete = (reviewId) => {\n        confirmAlert({\n            title: 'Are you sure?',\n            message: 'You want to delete this item?',\n            buttons: [\n                {\n                    label: 'Yes, Delete it',\n                    onClick: () => deleteSize(reviewId)\n                },\n                {\n                    label: 'No',\n                    // onClick: () => alert('Click No')\n                }\n            ]\n        });\n    }\n    //* call delete api\n    const deleteSize = (reviewId) => {\n        axios.delete(`http://markbran.in/apis/admin/review/${reviewId}`)\n            .then(function (response) {\n                setShowAlertSuccess(true);\n                setShowAlertDanger(false);\n                axiosReviews();\n            })\n            .catch(function (error) {\n                setShowAlertSuccess(false);\n                setShowAlertDanger(true);\n            })\n    }\n    // * update status\n    const updateStatus = (reviewId, value) => {\n        const formData = new FormData();\n        let status = isActive ? 1 : 0;\n        console.log(value, status);\n        formData.append('status', status);\n        axios.post(`http://markbran.in/apis/admin/review/${reviewId}`, formData, {\n            headers: {\n                \"auth-token\": jwtToken //the token is a variable which holds the token\n            }\n        })\n            .then(response => {\n                // setLoading(false);\n                // history.push('/sizes')\n                // // console.log(response);\n                // setError(null);\n                setShowAlertSuccess(true);\n                setShowAlertDanger(false);\n                setTextMessage('Review approved!.');\n\n                axiosReviews();\n            })\n            .catch(error => {\n                // console.log(error.response);\n                if (error.response && error.response.data.message) {\n                    setShowAlertSuccess(false);\n                    setShowAlertDanger(true);\n                    setTextMessage(error.response.data.message);\n                } else {\n                    setShowAlertSuccess(false);\n                    setShowAlertDanger(true);\n                    setTextMessage(\"Something went wrong, try again!.\");\n                }\n                // axiosReviews();\n                setIsActive(isActive);\n            });\n    }\n    const axiosReviews = () => {\n        axios.get('http://markbran.in/apis/admin/review', {\n            headers: {\n                \"auth-token\": jwtToken //the token is a variable which holds the token\n            }\n        })\n            .then(function (response) {\n                console.log(response.data.reviews);\n                setReviews(response.data.reviews);\n                setShowAlertSuccess(false);\n                setShowAlertDanger(false);\n            })\n            .catch(function (error) {\n                // console.log(error);\n                // console.log(error.response.data.message);\n                if (error.response && error.response.data.message) {\n                    setShowAlertSuccess(false);\n                    setShowAlertDanger(true);\n                    setTextMessage(error.response.data.message);\n                }\n            });\n    }\n    useEffect(() => {\n        axiosReviews();\n        if (reviews) {\n            setIsActive(reviews.status);\n        }\n    }, [reviews.status]);\n    return (\n        <CRow>\n            <CCol xl={12}>\n                <CCard>\n                    <CCardHeader>\n                        Product/Service Reviews\n                        {/* <CLink style={{ float: 'right' }} className=\"btn btn-success\" to=\"/product-service-review/add\">\n                            Add\n                        </CLink> */}\n                    </CCardHeader>\n                    <CCardBody>\n                        {showAlertSuccess ? <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n                            <strong>Deleted</strong> {textMessage ? textMessage : 'Your item has been deleted successfully.'}\n                            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div> : null}\n                        {showAlertDanger ? <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n                            <strong>Alert </strong> {textMessage ? textMessage : 'Something went wrong try again later !.'}\n                            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div> : null}\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">#</th>\n                                    <th scope=\"col\">Title</th>\n                                    <th scope=\"col\">Product</th>\n                                    <th scope=\"col\">Review</th>\n                                    <th scope=\"col\">Approve</th>\n                                    <th scope=\"col\">Create at</th>\n                                    <th scope=\"col\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {reviews.map((item, index) =>\n                                    <tr key={item.id}>\n                                        <th scope=\"row\">{index + 1}</th>\n                                        <td>{item.name}</td>\n                                        <td>{item.productName}</td>\n                                        <td>{item.description}</td>\n                                        <td>\n                                            <Switch onChange={(e) => onChangeIsActive(e, item.id)} checked={isActive} />\n                                        </td>\n                                        <td>{dateFormat(item.createdAt, \"mmmm dS, yyyy\")}</td>\n                                        <td>\n                                            {/* <CLink className=\"btn btn-sm btn-outline-warning\" to={`/sizes/edit-size/${item.id}`}>\n                                                Edit\n                                            </CLink> */}\n                                            <button onClick={() => clickOnDelete(item.id)} type=\"button\" className=\"btn btn-sm btn-outline-danger\">Delete</button>\n                                        </td>\n                                    </tr>\n                                )}\n\n                            </tbody>\n                        </table>\n                    </CCardBody>\n                </CCard>\n            </CCol>\n        </CRow>\n    )\n\n}\n\nexport default ProductServiceReview;\n"],"sourceRoot":""}