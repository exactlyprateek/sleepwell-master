{"version":3,"sources":["views/pages/login/Login.js"],"names":["axios","require","default","Login","props","history","useHistory","useState","error","setError","loading","setLoading","email","password","useForm","mode","control","handleSubmit","errors","formState","register","className","md","onSubmit","value","post","emailId","then","response","setUserSession","data","token","admin","push","catch","err","message","name","defaultValue","rules","required","pattern","render","field","type","placeholder","autoComplete","color","xs","disabled"],"mappings":"kMAqBMA,EAAQC,EAAQ,KAASC,QA4HhBC,UAxHD,SAACC,GACX,IAAIC,EAAUC,cACd,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KACA,GADA,KACgCL,mBAAS,KAAzC,mBAAOM,EAAP,KAEA,GAFA,KAEmEC,YAAQ,CAAEC,KAAM,SAA3EC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,aAA2BC,EAA5C,EAA+BC,UAAaD,OAA5C,EAAsDE,SA4BtD,OACI,qBAAKC,UAAU,qDAAf,SACI,cAAC,IAAD,UACI,cAAC,KAAD,CAAMA,UAAU,yBAAhB,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAOE,SAAUN,GAjCzB,SAACO,GACrB,IAAOZ,EAAmBY,EAAnBZ,MAAOC,EAAYW,EAAZX,SAEdJ,EAAS,MACTE,GAAW,GACXX,EAAMyB,KAAK,sCAAuC,CAC9CC,QAASd,EACTC,SAAUA,IAEbc,MAAK,SAAAC,GAEFjB,GAAW,GACXkB,YAAeD,EAASE,KAAKC,MAAOH,EAASE,KAAKE,OAClD3B,EAAQ4B,KAAK,iBAEhBC,OAAM,SAAAC,GACHxB,GAAW,GACPwB,EAAIP,SACJnB,EAAS0B,EAAIP,SAASE,KAAKM,SAE3B3B,EAAS,+BAaW,UACI,uCACA,mBAAGY,UAAU,aAAb,qCACA,uBAEIb,GACA,mBAAGa,UAAU,cAAb,SACKb,IAGT,eAAC,IAAD,WACI,eAAC,IAAD,CAAaa,UAAU,OAAvB,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOgB,KAAK,iBAIpB,cAAC,IAAD,CACIA,KAAK,QACLrB,QAASA,EACTsB,aAAc1B,EACd2B,MAAO,CACHC,SAAU,CACNhB,OAAO,EACPY,QAAS,qBAEbK,QAAS,CACLjB,MAAO,8CACPY,QAAS,0BAGjBM,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAD,2BAAYA,GAAZ,IAAmBC,KAAK,QAASC,YAAY,QAAQC,aAAa,iBAGjG,cAAC,IAAD,CAAWzB,UAAU,yBAAyB0B,MAAM,MAApD,SAA2D7B,EAAON,OAASM,EAAON,MAAMwB,aAE5F,eAAC,IAAD,WACI,eAAC,IAAD,CAAaf,UAAU,OAAvB,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOgB,KAAK,wBAIpB,cAAC,IAAD,CACIA,KAAK,WACLrB,QAASA,EACTsB,aAAczB,EACd0B,MAAO,CACHC,SAAU,CACNhB,OAAO,EACPY,QAAS,yBAGjBM,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAD,2BAAYA,GAAZ,IAAmBC,KAAK,WAAYC,YAAY,WAAWC,aAAa,oBAGvG,cAAC,IAAD,CAAWzB,UAAU,yBAAyB0B,MAAM,MAApD,SAA2D7B,EAAOL,UAAYK,EAAOL,SAASuB,aAGlG,cAAC,KAAD,UACI,cAAC,IAAD,CAAMY,GAAG,IAAT,SACI,cAAC,IAAD,CAASJ,KAAK,SAASG,MAAM,UAAUE,WAAUvC,EAAwBW,UAAU,OAAnF,SAA2FX,EAAU,aAAe","file":"static/js/189.2de036b2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { setUserSession } from '../../../Util/Comman';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardGroup,\r\n    CCol,\r\n    CContainer,\r\n    CForm,\r\n    CFormGroup,\r\n    CFormText,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n    CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nconst axios = require('axios').default;\r\n\r\n// \"proxy\": \"http://localhost:8000\"\r\n\r\nconst Login = (props) => {\r\n    let history = useHistory();\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const { control, handleSubmit, formState: { errors }, register } = useForm({ mode: 'all' });\r\n\r\n\r\n    const onHandlerSubmit = (value) => {\r\n        const {email, password} = value;\r\n        // console.log(\"args\", value);\r\n        setError(null);\r\n        setLoading(true);\r\n        axios.post('http://markbran.in/apis/admin/login', {\r\n            emailId: email,\r\n            password: password\r\n        })\r\n        .then(response => {\r\n            // console.log(response);\r\n            setLoading(false);\r\n            setUserSession(response.data.token, response.data.admin);\r\n            history.push('/dashboard')\r\n        })\r\n        .catch(err => {\r\n            setLoading(false);\r\n            if (err.response) {\r\n                setError(err.response.data.message);\r\n            } else {\r\n                setError(\"Something went wrong!\");\r\n            }\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n            <CContainer>\r\n                <CRow className=\"justify-content-center\">\r\n                    <CCol md=\"8\">\r\n                        <CCardGroup>\r\n                            <CCard className=\"p-4\">\r\n                                <CCardBody>\r\n                                    <CForm onSubmit={handleSubmit(onHandlerSubmit)}>\r\n                                        <h1>Login</h1>\r\n                                        <p className=\"text-muted\">Sign In to your account</p>\r\n                                        <br />\r\n                                        {\r\n                                            error &&\r\n                                            <p className=\"text-danger\">\r\n                                                {error}\r\n                                            </p>\r\n                                        }\r\n                                        <CFormGroup>\r\n                                            <CInputGroup className=\"mb-3\">\r\n                                                <CInputGroupPrepend>\r\n                                                    <CInputGroupText>\r\n                                                        <CIcon name=\"cil-user\" />\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupPrepend>\r\n                                                {/* <CInput type=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" autoComplete=\"email\" /> */}\r\n                                                <Controller\r\n                                                    name=\"email\"\r\n                                                    control={control}\r\n                                                    defaultValue={email}\r\n                                                    rules={{\r\n                                                        required: {\r\n                                                            value: true,\r\n                                                            message: \"Email is required\"\r\n                                                        },\r\n                                                        pattern: {\r\n                                                            value: /^\\w+[\\w-.]*@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$/i,\r\n                                                            message: \"invalid email address\"\r\n                                                        }\r\n                                                    }}\r\n                                                    render={({ field }) => <CInput {...field} type=\"email\"  placeholder=\"Email\" autoComplete=\"email\" />}\r\n                                                />\r\n                                            </CInputGroup>\r\n                                            <CFormText className=\"help-block text-danger\" color=\"red\">{errors.email && errors.email.message}</CFormText>\r\n                                        </CFormGroup>\r\n                                        <CFormGroup>\r\n                                            <CInputGroup className=\"mb-3\">\r\n                                                <CInputGroupPrepend>\r\n                                                    <CInputGroupText>\r\n                                                        <CIcon name=\"cil-lock-locked\" />\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupPrepend>\r\n                                                {/* <CInput type=\"email\" value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" autoComplete=\"email\" /> */}\r\n                                                <Controller\r\n                                                    name=\"password\"\r\n                                                    control={control}\r\n                                                    defaultValue={password}\r\n                                                    rules={{\r\n                                                        required: {\r\n                                                            value: true,\r\n                                                            message: \"Password is required\"\r\n                                                        }\r\n                                                    }}\r\n                                                    render={({ field }) => <CInput {...field} type=\"password\"  placeholder=\"Password\" autoComplete=\"password\" />}\r\n                                                />\r\n                                            </CInputGroup>\r\n                                            <CFormText className=\"help-block text-danger\" color=\"red\">{errors.password && errors.password.message}</CFormText>\r\n                                        </CFormGroup>\r\n                                        \r\n                                        <CRow>\r\n                                            <CCol xs=\"6\">\r\n                                                <CButton type=\"submit\" color=\"primary\" disabled={loading ? true : false} className=\"px-4\">{loading ? 'Loading...' : 'Login'}</CButton>\r\n                                            </CCol>\r\n                                        </CRow>\r\n                                    </CForm>\r\n                                </CCardBody>\r\n                            </CCard>\r\n                        </CCardGroup>\r\n                    </CCol>\r\n                </CRow>\r\n            </CContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"sourceRoot":""}