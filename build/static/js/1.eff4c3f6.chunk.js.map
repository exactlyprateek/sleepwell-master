{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","element","type","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","isObject","Object","keys","length","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","useController","rules","control","shouldUnregister","methods","defaultValuesRef","register","fieldsRef","unregister","fieldArrayNamesRef","controllerSubjectRef","shouldUnmountUnregister","onChange","onBlur","ref","_f","setInputStateValue","props","formStateRef","formStateSubjectRef","nameRef","updateFormState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","controllerSubscription","data","values","mount","field","event","target","isCheckBoxInput","checked","getControllerValue","elm","fieldState","defineProperties","invalid","isTouched","Controller","render","validateAllFieldCriteria","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","unregisterFieldsNamesRef","watchSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","forEach","radioRef","selectRef","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","schemaResult","all","fieldName","setInternalValues","inputKey","has","isFieldWatched","updateValidAndValue","isWithinRefCallback","defaultChecked","hasValidation","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","setFocus","useFieldArraySubscription","isLiveInDom","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","o","allowArrayLike","it","i","F","s","n","_e","f","normalCompletion","didErr","step","_e2"],"mappings":"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","file":"static/js/1.eff4c3f6.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmountUnregister,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) ||\n      isNameInFieldArray(fieldArrayNamesRef.current, name)\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      if (shouldUnmountUnregister || shouldUnregister) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: FieldValues,\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  options &&\n  mounted &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldErrors,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FormStateSubjectRef,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef<FormStateSubjectRef<TFieldValues>>(\n    new Subject(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(\n          isWatched ? { name } : updatedFormState,\n        );\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n          name,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        ),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    let isValid = true;\n\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            isValid = false;\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n\n    return isValid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : (convertToArrayPayload(name) as InternalFieldName[]);\n      let isValid;\n      let schemaResult: FieldErrors<TFieldValues> | {} = {};\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        schemaResult = await executeSchemaOrResolverValidation(\n          fields,\n          isUndefined(name) ? undefined : (fields as FieldName<TFieldValues>[]),\n        );\n        isValid = fields.every((name) => !get(schemaResult, name));\n      } else {\n        isValid = isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean);\n      }\n\n      formStateSubjectRef.current.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current\n          ? isEmptyObject(schemaResult)\n          : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n        isFieldArray || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options, field._f.mount) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          updateFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(\n              isWatched ? { name } : { ...state, name },\n            )\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        )\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getFieldsValues(fieldsRef, defaultValuesRef.current)\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      hasValidation(options, true) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name) as Field;\n                field && (field._f.mount = false);\n\n                if (\n                  isWeb &&\n                  (shouldUnregister || (options && options.shouldUnregister))\n                ) {\n                  unregisterFieldsNamesRef.current.add(name);\n                }\n              }\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(\n        fieldsRef,\n        shouldUnregister ? {} : defaultValuesRef.current,\n      );\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } catch {\n        hasNoPromiseError = false;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions, values);\n    isMountedRef.current = false;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n    unregisterFieldsNamesRef.current.forEach((name) => {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    });\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmountUnregister: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}