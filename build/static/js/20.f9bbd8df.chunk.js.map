{"version":3,"sources":["views/whatGoesInside/AddWhatGoesInside.js","components/CkEditor5.js"],"names":["schema","require","default","yup","shape","sectionTitle","required","sectionSubTitle","AddWhatGoesInside","useForm","mode","resolver","yupResolver","control","handleSubmit","errors","formState","useHistory","useState","error","setError","loading","setLoading","innovationImage","setInnovationImage","sectionHeading","sectionImage","sectionDescription","inputList","setInputList","description","setDescription","handleChange","sessionStorage","getItem","e","index","target","name","value","files","console","log","list","handleAddInput","xs","sm","onSubmit","innovationArray","title","subTitle","image","section","FormData","append","className","htmlFor","defaultValue","rules","message","render","field","type","placeholder","autoComplete","color","variant","onChange","custom","id","multiple","xl","onEditorValue","data","map","item","length","onClick","splice","handleRemoveInputs","rows","disabled","CkEditor5","props","ref","useRef","editor","ClassicEditor","editorValue","event","getData"],"mappings":"qOA+BMA,GAFQC,EAAQ,KAASC,QAEhBC,MAAaC,MAAM,CAC9BC,aAAcF,MAAaG,WAC3BC,gBAAiBJ,MAAaG,cA2QnBE,UAvQW,WACtB,MAAyDC,YAAQ,CAAEC,KAAM,MAAOC,SAAUC,YAAYZ,KAA9Fa,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,aAA2BC,EAA5C,EAA+BC,UAAaD,OAE5C,GADcE,cACYC,mBAAS,OAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA8CJ,mBAAS,IAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAEA,EAAkCN,mBAAS,CAAC,CAAEO,eAAgB,GAAIC,aAAc,GAAIC,mBAAoB,MAAxG,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAsCX,mBAAS,IAA/C,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAAoDb,mBAAS,IAA7D,mBAUMc,GAVN,UAOeC,eAAeC,QAAQ,SAGjB,SAACC,EAAGC,GACrB,MAA6BD,EAAEE,OAAxBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,MACpBC,QAAQC,IAAIH,GACZ,IAAMI,EAAI,YAAOf,GACjBe,EAAKP,GAAOE,GAAQE,EAAQA,EAAM,GAAKD,EACvCV,EAAac,KAIXC,EAAiB,WACnBf,EAAa,GAAD,mBAAKD,GAAL,CAAgB,CAAEH,eAAgB,GAAIC,aAAc,GAAIC,mBAAoB,QAuE5F,OACI,8BACI,cAAC,KAAD,UACI,cAAC,IAAD,CAAMkB,GAAG,KAAKC,GAAG,KAAjB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,+BAGA,cAAC,IAAD,UACI,eAAC,IAAD,CAAOC,SAAUjC,GA5DjB,SAACqB,GAGrB,IAAMa,EAAkB,CACpB,CAAEC,MAAOd,EAAE9B,cACX,CAAE6C,SAAUf,EAAE5B,iBACd,CAAE4C,MAAO5B,GACT,CAAEO,YAAaA,GACf,CAAEsB,QAASxB,KAME,IAAIyB,UACZC,OAAO,iBAAkBN,GAUlC5B,EAAS,MACTE,GAAW,MAkCS,UACI,uBAEIH,GACA,mBAAGoC,UAAU,cAAb,SACKpC,IAGT,eAAC,KAAD,WACI,cAAC,IAAD,CAAM0B,GAAG,IAAT,SAEI,eAAC,IAAD,WACI,cAAC,KAAD,CAAQW,QAAQ,WAAhB,2BACA,cAAC,IAAD,CAAaD,UAAU,OAAvB,SACI,cAAC,IAAD,CACIjB,KAAK,eACLzB,QAASA,EACT4C,aAAc,GACdC,MAAO,CACHpD,SAAU,CACNiC,OAAO,EACPoB,QAAS,8BAGjBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAD,2BAAYA,GAAZ,IAAmBC,KAAK,OAAOC,YAAY,gBAAgBC,aAAa,wBAGvG,cAAC,IAAD,CAAWT,UAAU,yBAAyBU,MAAM,MAApD,SAA2DlD,EAAOV,cAAgBU,EAAOV,aAAasD,eAG9G,cAAC,IAAD,CAAMd,GAAG,IAAT,SACI,eAAC,IAAD,WACI,cAAC,KAAD,CAAQW,QAAQ,WAAhB,+BACA,cAAC,IAAD,CAAaD,UAAU,OAAvB,SACI,cAAC,IAAD,CACIjB,KAAK,kBACLzB,QAASA,EACT4C,aAAc,GACdC,MAAO,CACHpD,SAAU,CACNiC,OAAO,EACPoB,QAAS,0BAGjBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAD,2BAAYA,GAAZ,IAAmBC,KAAK,OAAOC,YAAY,kBAAkBC,aAAa,0BAGzG,cAAC,IAAD,CAAWT,UAAU,yBAAyBU,MAAM,MAApD,SAA2DlD,EAAOR,iBAAmBQ,EAAOR,gBAAgBoD,kBAIxH,cAAC,KAAD,UACI,eAAC,IAAD,CAAMd,GAAG,IAAT,UACI,cAAC,KAAD,CAAQW,QAAQ,WAAhB,mBACA,eAAC,IAAD,CAAaD,UAAU,OAAvB,UACI,cAAC,KAAD,CAAQC,QAAQ,QAAQU,QAAQ,cAAhC,6BAGA,cAAC,IAAD,CAAYC,SA1H9B,SAAChC,GACnBX,EAAmBW,EAAEE,OAAOG,MAAM,KAyHuC4B,QAAM,EAACC,GAAG,QAAQP,KAAK,OAAOQ,SAAS,iBAKxF,cAAC,KAAD,UACI,cAAC,IAAD,CAAMC,GAAG,KAAT,SACI,eAAC,IAAD,WACI,cAAC,KAAD,CAAQf,QAAQ,WAAhB,yBACA,cAAC,IAAD,CAAUgB,cArKxB,SAACC,GAEvB1C,EAAe0C,MAoKqB,cAAC,IAAD,CAAWlB,UAAU,yBAAyBU,MAAM,MAApD,SAA2DlD,EAAOe,aAAef,EAAOe,YAAY6B,iBAIhH,cAAC,KAAD,UACI,eAAC,IAAD,CAAMd,GAAG,KAAKU,UAAU,OAAxB,UACI,uBACA,wDAGP3B,EAAU8C,KAAI,SAACC,EAAMvC,GAClB,OACI,eAAC,KAAD,WACI,cAAC,IAAD,CAAMmC,GAAG,IAAT,SACI,eAAC,IAAD,WACI,cAAC,KAAD,CAAQf,QAAQ,WAAhB,qBACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAQlB,KAAK,iBAAiB6B,SAAU,SAAAhC,GAAC,OAAIH,EAAaG,EAAGC,IAAQG,MAAOoC,EAAKlD,eAAgBqC,KAAK,OAAOC,YAAY,UAAUC,aAAa,mBAI5J,eAAC,IAAD,CAAMnB,GAAG,IAAT,UACI,cAAC,KAAD,CAAQW,QAAQ,WAAhB,mBACA,eAAC,IAAD,CAAaD,UAAU,OAAvB,UACI,cAAC,KAAD,CAAQC,QAAQ,QAAQU,QAAQ,cAAhC,6BAGA,cAAC,IAAD,CAAYC,SAAU,SAAAhC,GAAC,OAAIH,EAAaG,EAAGC,IAAQE,KAAK,eAAe8B,QAAM,EAACC,GAAG,QAAQP,KAAK,OAAOQ,SAAS,eAIhG,IAArB1C,EAAUgD,QAAgB,cAAC,IAAD,CAAM/B,GAAG,IAAIU,UAAU,kBAAvB,SACvB,8BACI,wBAAQsB,QAAS,kBAjLtC,SAACzC,GACxB,IAAMO,EAAI,YAAOf,GACjBe,EAAKmC,OAAO1C,EAAO,GACnBP,EAAac,GA8KsDoC,CAAmB3C,IAAQmB,UAAU,iBAAiBO,KAAK,SAAlF,wBAGPlC,EAAUgD,OAAS,IAAMxC,GAAS,cAAC,IAAD,CAAMS,GAAG,IAAIU,UAAU,kBAAvB,SAC/B,8BACI,wBAAQsB,QAASjC,EAAgBW,UAAU,kBAAkBO,KAAK,SAAlE,qBAGR,cAAC,IAAD,CAAMS,GAAG,KAAT,SACI,eAAC,IAAD,WACI,cAAC,KAAD,CAAQf,QAAQ,WAAhB,yBACA,cAAC,IAAD,UACI,cAAC,KAAD,CAEIa,GAAG,UACHW,KAAK,IAEL1C,KAAK,qBAAqB6B,SAAU,SAAAhC,GAAC,OAAIH,EAAaG,EAAGC,IAAQG,MAAOoC,EAAKhD,8BAtCtFS,MAyDnB,cAAC,KAAD,UACI,cAAC,IAAD,CAAMS,GAAG,IAAT,SACI,wBAAQU,UAAU,kBAAkB0B,WAAU5D,EAAwByC,KAAK,SAA3E,SAAqFzC,EAAU,aAAe,6B,+EC/RtJ,uDA0Ee6D,IA1DC,SAACC,EAAOC,GACGC,mBAQvB,OACI,8BACI,cAAC,KAAD,UACI,cAAC,IAAD,CAAMxC,GAAG,KAAKC,GAAG,KAAjB,SAqBI,cAAC,WAAD,CACIwC,OAAQC,IACRd,KAAOU,EAAMK,YAAcL,EAAMK,YAAc,GAS/CrB,SAzCG,SAACsB,EAAOH,GACvBA,EAAOI,WACPP,EAAMX,cAAcc,EAAOI","file":"static/js/20.f9bbd8df.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n    // CButton,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CFormText,\n    CInput,\n    CLink,\n    CInputFile,\n    CInputGroup,\n    CLabel,\n    CRow,\n    CTextarea,\n} from '@coreui/react'\n// import CIcon from '@coreui/icons-react'\n// import { DocsLink } from 'src/reusable'\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useHistory } from 'react-router';\n\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport '../../App.css';\nimport CkEditor from '../../components/CkEditor5.js';\n\nconst axios = require('axios').default;\n\nconst schema = yup.object().shape({\n    sectionTitle: yup.string().required(),\n    sectionSubTitle: yup.string().required(),\n});\n\n\nconst AddWhatGoesInside = () => {\n    const { control, handleSubmit, formState: { errors } } = useForm({ mode: 'all', resolver: yupResolver(schema) });\n    let history = useHistory();\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    // const [isFeatured, setIsFeatured] = useState(false);\n    const [innovationImage, setInnovationImage] = useState('');\n    // const [description, setDescription] = useState('');\n    const [inputList, setInputList] = useState([{ sectionHeading: \"\", sectionImage: \"\", sectionDescription: \"\" }]);\n\n    const [description, setDescription] = useState('');\n    const [sectionDescription, setSectionDescription] = useState('');\n\n    const handleDescription = (data) => {\n        // console.log(data)\n        setDescription(data);\n    }\n    \n    let jwtToken = sessionStorage.getItem(\"token\");\n\n    //* change dynamic input fields   \n    const handleChange = (e, index) => {\n        const {name, value, files} = e.target;\n        console.log(value);\n        const list = [...inputList];\n        list[index][name] = files ? files[0] : value;\n        setInputList(list);\n    }\n\n    //* Add dynamic input fields\n    const handleAddInput = () => {\n        setInputList([...inputList, { sectionHeading: \"\", sectionImage: \"\", sectionDescription: \"\"}]);\n    }\n\n    //* remove dynamic input fields\n    const handleRemoveInputs = (index) => {\n        const list = [...inputList];\n        list.splice(index, 1);\n        setInputList(list);\n    }\n    \n    //* description\n    const descriptionOnChange = (e) => {\n        setSectionDescription(e.target.value);\n    }\n\n    //* image\n    const imageOnChange = (e) => {\n        setInnovationImage(e.target.files[0]);\n    }\n\n    const onHandlerSubmit = (e) => {\n        // e.preventDefault();\n        // console.log('value', e);\n        const innovationArray = [\n            { title: e.sectionTitle },\n            { subTitle: e.sectionSubTitle },\n            { image: innovationImage },\n            { description: description },\n            { section: inputList }\n        ];\n        // console.log(innovationArray);\n        // innovationArray[\n        //     { title: e.sectionTitle},\n        // ];\n        const formData = new FormData();\n        formData.append('innovationData', innovationArray);\n        // formData.append('isFeatured', isFeatured);\n        // formData.append('sectionTitle', e.sectionTitle);\n        // formData.append('sectionSubTitle', e.sectionSubTitle);\n        // formData.append('image', innovationImage);\n        // formData.append('description', e.description);\n        // formData.append('rightDescription', e.rightDescription);\n        // formData.append('status', 1);\n\n\n        setError(null);\n        setLoading(true)\n\n        // axios.post('http://markbran.in/apis/admin/category', formData, {\n        //     headers: {\n        //         'Content-Type': 'multipart/form-data',\n        //         'auth-token': jwtToken\n        //     }\n        // })\n        //     .then(res => {\n        //         setLoading(false);\n        //         // setUserSession(response.data.token, response.data.user);\n        //         history.push('/categories')\n        //         console.log(res.response.data);\n        //     })\n        //     .catch(err => {\n        //         // console.log(err.response.data.message);\n        //         setLoading(false);\n        //         if (err.response && err.response.data.message) {\n        //             setError(err.response.data.message);\n        //         } else {\n        //             setError(\"Something went wrong!\");\n        //         }\n        //     });\n    }\n\n    return (\n        <div>\n            <CRow>\n                <CCol xs=\"12\" sm=\"12\">\n                    <CCard>\n                        <CCardHeader>\n                            What Goes Inside\n                        </CCardHeader>\n                        <CCardBody>\n                            <CForm onSubmit={handleSubmit(onHandlerSubmit)}>\n                                <br />\n                                {\n                                    error &&\n                                    <p className=\"text-danger\">\n                                        {error}\n                                    </p>\n                                }\n                                <CRow>\n                                    <CCol xs=\"6\">\n                                        {/* <CkEditor /> */}\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"category\">Section Title</CLabel>\n                                            <CInputGroup className=\"mb-3\">\n                                                <Controller\n                                                    name=\"sectionTitle\"\n                                                    control={control}\n                                                    defaultValue={''}\n                                                    rules={{\n                                                        required: {\n                                                            value: true,\n                                                            message: \"Section title is required\"\n                                                        },\n                                                    }}\n                                                    render={({ field }) => <CInput {...field} type=\"text\" placeholder=\"Section title\" autoComplete=\"Section title\" />}\n                                                />\n                                            </CInputGroup>\n                                            <CFormText className=\"help-block text-danger\" color=\"red\">{errors.sectionTitle && errors.sectionTitle.message}</CFormText>\n                                        </CFormGroup>\n                                    </CCol>\n                                    <CCol xs=\"6\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"category\">Section sub title</CLabel>\n                                            <CInputGroup className=\"mb-3\">\n                                                <Controller\n                                                    name=\"sectionSubTitle\"\n                                                    control={control}\n                                                    defaultValue={''}\n                                                    rules={{\n                                                        required: {\n                                                            value: true,\n                                                            message: \"Sub title is required\"\n                                                        },\n                                                    }}\n                                                    render={({ field }) => <CInput {...field} type=\"text\" placeholder=\"Technology name\" autoComplete=\"Technology name\" />}\n                                                />\n                                            </CInputGroup>\n                                            <CFormText className=\"help-block text-danger\" color=\"red\">{errors.sectionSubTitle && errors.sectionSubTitle.message}</CFormText>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <CCol xs=\"6\">\n                                        <CLabel htmlFor=\"category\">Image</CLabel>\n                                        <CInputGroup className=\"mb-3\">\n                                            <CLabel htmlFor=\"Image\" variant=\"custom-file\">\n                                                Choose image...\n                                            </CLabel>\n                                            <CInputFile onChange={imageOnChange} custom id=\"Image\" type=\"file\" multiple=\"true\" />\n                                        </CInputGroup>\n                                    </CCol>\n                                </CRow>\n                                \n                                <CRow>\n                                    <CCol xl=\"12\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"category\">Description</CLabel>\n                                            <CkEditor onEditorValue={handleDescription} />\n                                            <CFormText className=\"help-block text-danger\" color=\"red\">{errors.description && errors.description.message}</CFormText>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow>\n                                <CRow>\n                                    <CCol xs=\"12\" className=\"my-4\">\n                                        <hr />\n                                        <h2>advantage section</h2>\n                                    </CCol>\n                                </CRow>\n                                {inputList.map((item, index) => {\n                                    return (\n                                        <CRow key={index}>\n                                            <CCol xl=\"5\">\n                                                <CFormGroup>\n                                                    <CLabel htmlFor=\"category\">Heading</CLabel>\n                                                    <CInputGroup>\n                                                        <CInput name=\"sectionHeading\" onChange={e => handleChange(e, index)} value={item.sectionHeading} type=\"text\" placeholder=\"Heading\" autoComplete=\"Heading\" />\n                                                    </CInputGroup>\n                                                </CFormGroup>\n                                            </CCol>\n                                            <CCol xs=\"5\">\n                                                <CLabel htmlFor=\"category\">Image</CLabel>\n                                                <CInputGroup className=\"mb-3\">\n                                                    <CLabel htmlFor=\"Image\" variant=\"custom-file\">\n                                                        Choose image...\n                                                    </CLabel>\n                                                    <CInputFile onChange={e => handleChange(e, index)} name=\"sectionImage\" custom id=\"Image\" type=\"file\" multiple=\"true\" />\n                                                    {/* <CInputFile onChange={e => handleChange(e, index)} value={item.sectionImage} name=\"sectionImage\" custom id=\"Image\" type=\"file\" multiple=\"true\" /> */}\n                                                </CInputGroup>\n                                            </CCol>\n                                            {inputList.length !== 1 && <CCol xs=\"1\" className=\"mb-auto mt-auto\">\n                                                <div >\n                                                    <button onClick={() => handleRemoveInputs(index)} className=\"btn btn-danger\" type=\"button\">Remove</button>\n                                                </div>\n                                            </CCol>}\n                                            {inputList.length - 1 === index && <CCol xs=\"1\" className=\"mb-auto mt-auto\">\n                                                <div >\n                                                    <button onClick={handleAddInput} className=\"btn btn-success\" type=\"button\">Add</button>\n                                                </div>\n                                            </CCol>}\n                                            <CCol xl=\"12\">\n                                                <CFormGroup>\n                                                    <CLabel htmlFor=\"category\">Description</CLabel>\n                                                    <CInputGroup>\n                                                        <CTextarea\n                                                            // component=\"textarea\"\n                                                            id=\"content\"\n                                                            rows=\"3\"\n                                                            // onChange={setSectionDescription} value={sectionDescription}\n                                                            name=\"sectionDescription\" onChange={e => handleChange(e, index)} value={item.sectionDescription}\n                                                        ></CTextarea>\n                                                    </CInputGroup>\n                                                </CFormGroup>\n                                            </CCol>\n                                            \n                                        </CRow>\n                                    )\n                                })}\n                                {/* <CRow>\n                                    <CCol xl=\"6\">\n                                        <CFormGroup>\n                                            <CLabel htmlFor=\"category\">Featured Category</CLabel>\n                                            <CInputGroup>\n                                                <Switch onChange={onChangeIsFeatured} checked={isFeatured} />\n                                            </CInputGroup>\n                                        </CFormGroup>\n                                    </CCol>\n                                </CRow> */}\n                                <CRow>\n                                    <CCol xs=\"8\">\n                                        <button className=\"btn btn-success\" disabled={loading ? true : false} type=\"submit\">{loading ? 'Loading...' : 'Save'}</button>\n                                    </CCol>\n                                </CRow>\n                            </CForm>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n\n        </div>\n    )\n}\n\nexport default AddWhatGoesInside\n","import React, { forwardRef, useEffect, useRef, useState } from 'react'\nimport {\n    CCol,\n    CRow,\n    CInput,\n\n} from '@coreui/react'\n\n// import { EditorState } from 'draft-js';\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// import '../App.css';\n\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nlet CkEditor5 = (props, ref) => {\n    const editorValueRef = useRef();\n   \n    const editorOnChange = (event, editor) => {\n        if (editor.getData()) {\n            props.onEditorValue(editor.getData());\n        }\n    }\n \n    return (\n        <div>\n            <CRow>\n                <CCol xs=\"12\" sm=\"12\">\n                    {/* <Editor\n                        toolbar={{\n                            image: {\n                                urlEnabled: true,\n                                uploadEnabled: true,\n                                uploadCallback: _uploadImageCallBack,\n                                alignmentEnabled: true,\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg'\n                            }\n                        }}\n                        editorState={wysiwygDescription}\n                        onEditorStateChange={onEditorStateChange}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                        onChange={editorOnChange}\n                        ref={editorValueRef}\n                    // ref={ref => editorValueRef(ref)}\n                    /> */}\n\n                    <CKEditor\n                        editor={ClassicEditor}\n                        data={(props.editorValue ? props.editorValue : '')}\n                        // onReady={editor => {\n                        //     // You can store the \"editor\" and use when it is needed.\n                        //     console.log('Editor is ready to use!', editor);\n                        // }}\n                        // onChange={(event, editor) => {\n                        //     const data = editor.getData();\n                        //     console.log({ event, editor, data });\n                        // }}\n                        onChange={editorOnChange}\n                        // onBlur={(event, editor) => {\n                        //     console.log('Blur.', editor);\n                        // }}\n                        // onFocus={(event, editor) => {\n                        //     console.log('Focus.', editor);\n                        // }}\n                    />\n                </CCol>\n            </CRow>\n        </div>\n    )\n}\n\nexport default CkEditor5\n"],"sourceRoot":""}