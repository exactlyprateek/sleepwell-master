{"version":3,"sources":["views/permision/AddPermission.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/toNestError.ts","../../src/yup.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"],"names":["schema","yup","shape","user","required","AddPermision","useForm","mode","resolver","yupResolver","control","register","errors","handleSubmit","formState","useState","loading","setSections","title","id","sectionsList","onChangeSections","e","xl","xs","md","htmlFor","className","name","defaultValue","rules","value","message","render","field","color","options","onSelect","onRemove","displayValue","disabled","type","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","toNestError","fields","fieldErrors","path","get","set","assign","ref","schemaOptions","resolverOptions","values","context","abortEarly","result","error","validateAllFieldCriteria","criteriaMode","inner","reduce","previous","types","messages","appendErrors","concat","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","from","test","_arrayLikeToArray","len","arr2"],"mappings":"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","file":"static/js/81.5a466046.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n    CFormGroup,\r\n    CInputGroup,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CRow,\r\n    CForm,\r\n    CSwitch,\r\n    CSelect,\r\n    CLabel,\r\n    CFormText,\r\n} from '@coreui/react'\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { useForm, Controller } from 'react-hook-form';\r\n\r\nconst schema = yup.object().shape({\r\n    user: yup.string().required(),\r\n});\r\n\r\n\r\nconst AddPermision = () => {\r\n    const { register, control, handleSubmit, formState: { errors } } = useForm({ mode: 'all', resolver: yupResolver(schema) });\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [user, setUser] = useState('');\r\n    const [sections, setSections] = useState('');\r\n    const [sectionsList, setSectionsList] = useState([{ title: 'Home management', id: 1 }, { title: 'Content management', id: 2 }]);\r\n\r\n    const onChangeUser = (e) => {\r\n        setUser(e.target.value);\r\n    }\r\n    const onChangeSections = (e) => {\r\n        setSections(e);\r\n    }\r\n    return (\r\n        <CRow>\r\n            <CCol xl={12}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        Permision\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                        {/* <CDataTable>\r\n\r\n                        </CDataTable> */}\r\n                        <CForm>\r\n                            <CRow>\r\n                                <CCol xs=\"12\" md=\"6\">\r\n                                    <CFormGroup>\r\n                                        <CLabel htmlFor=\"category\">Title</CLabel>\r\n                                        <CInputGroup className=\"mb-3\">\r\n                                            <Controller\r\n                                                name=\"user\"\r\n                                                control={control}\r\n                                                defaultValue={''}\r\n                                                rules={{\r\n                                                    required: {\r\n                                                        value: true,\r\n                                                        message: \"title is required\"\r\n                                                    },\r\n                                                }}\r\n                                                render={({ field }) => <CSelect {...field}>\r\n                                                    <option value=\"\">\r\n                                                        Select user\r\n                                                    </option>\r\n                                                    <option value={1}>\r\n                                                        admin\r\n                                                    </option>\r\n                                                    <option value={1}>\r\n                                                        user\r\n                                                    </option>\r\n\r\n                                                </CSelect>}\r\n                                            />\r\n                                        </CInputGroup>\r\n                                        <CFormText className=\"help-block text-danger\" color=\"red\">{errors.user && errors.user.message}</CFormText>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol xs=\"12\" md=\"6\">\r\n                                    <CFormGroup>\r\n                                        <CLabel htmlFor=\"category\">Sections</CLabel>\r\n                                        <CInputGroup className=\"mb-3\">\r\n                                            <Multiselect\r\n                                                options={sectionsList} // Options to display in the dropdown\r\n                                                // selectedValues={this.state.selectedValue} // Preselected value to persist in dropdown\r\n                                                onSelect={onChangeSections} // Function will trigger on select event\r\n                                                onRemove={onChangeSections} // Function will trigger on remove event\r\n                                                displayValue=\"title\" // Property name to display in the dropdown options\r\n                                            />\r\n                                        </CInputGroup>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <CRow>\r\n                                <CCol md=\"3\">\r\n                                    <CFormGroup>\r\n                                            <CLabel htmlFor=\"category\">Create</CLabel>\r\n                                        <CInputGroup>\r\n                                            <CSwitch\r\n                                                key={1}\r\n                                                color=\"success\"\r\n                                            />\r\n                                        </CInputGroup>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"3\">\r\n                                    <CFormGroup>\r\n                                            <CLabel htmlFor=\"category\">View</CLabel>\r\n                                        <CInputGroup>\r\n                                            <CSwitch\r\n                                                key={1}\r\n                                                color=\"success\"\r\n                                            />\r\n                                        </CInputGroup>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"3\">\r\n                                    <CFormGroup>\r\n                                            <CLabel htmlFor=\"category\">Update</CLabel>\r\n                                        <CInputGroup>\r\n                                            <CSwitch\r\n                                                key={1}\r\n                                                color=\"success\"\r\n                                            />\r\n                                        </CInputGroup>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                                <CCol md=\"3\">\r\n                                    <CFormGroup>\r\n                                            <CLabel htmlFor=\"category\">Delete</CLabel>\r\n                                        <CInputGroup>\r\n                                            <CSwitch\r\n                                                key={1}\r\n                                                color=\"success\"\r\n                                            />\r\n                                        </CInputGroup>\r\n                                    </CFormGroup>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <CRow>\r\n                                <CCol xs=\"8\" className=\"my-4\">\r\n                                    <button className=\"btn btn-success\" disabled={loading ? true : false} type=\"submit\">{loading ? 'Loading...' : 'Add permission'}</button>\r\n                                </CCol>\r\n                            </CRow>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n\r\n}\r\n\r\nexport default AddPermision;\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  InternalFieldName,\n} from 'react-hook-form';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  fields: Record<InternalFieldName, Field['_f']>,\n): FieldErrors<TFieldValues> => {\n  const fieldErrors: FieldErrors<TFieldValues> = {};\n  for (const path in errors) {\n    const field = get(fields, path) as Field['_f'] | undefined;\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n","import Yup from 'yup';\nimport { toNestError } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return error.inner.reduce<Record<string, FieldError>>((previous, error) => {\n    if (!previous[error.path!]) {\n      previous[error.path!] = { message: error.message, type: error.type! };\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = previous[error.path!].types;\n      const messages = types && types[error.type!];\n\n      previous[error.path!] = appendErrors(\n        error.path!,\n        validateAllFieldCriteria,\n        previous,\n        error.type!,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    return previous;\n  }, {});\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(e, options.criteriaMode === 'all'),\n          options.fields,\n        ),\n      };\n    }\n  };\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}"],"sourceRoot":""}